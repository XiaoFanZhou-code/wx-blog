{"version":3,"sources":["index.js","libs/mixin/mixin.js","libs/request/index.js","libs/function/deepMerge.js","libs/function/deepClone.js","libs/function/test.js","libs/function/queryParams.js","libs/function/route.js","libs/function/timeFormat.js","libs/function/timeFrom.js","libs/function/colorGradient.js","libs/function/guid.js","libs/function/color.js","libs/function/type2icon.js","libs/function/randomArray.js","libs/function/addUnit.js","libs/function/random.js","libs/function/trim.js","libs/function/toast.js","libs/function/getParent.js","libs/function/$parent.js","libs/function/sys.js","libs/function/debounce.js","libs/function/throttle.js","libs/config/config.js","libs/config/zIndex.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AENA,AJYA,ACHA;AFOA,AIZA,ADGA,AENA,AJYA,ACHA;AFOA,AIZA,ADGA,AENA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ADGA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ADGA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ADGA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AJYA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AGTA,APqBA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AGTA,APqBA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AGTA,APqBA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AIZA,ADGA,AGTA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AU9BA,ANkBA,ADGA,AGTA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AU9BA,ANkBA,ADGA,AGTA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AU9BA,ANkBA,ADGA,AGTA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AU9BA,ANkBA,ADGA,AQxBA,ALeA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AU9BA,ANkBA,ADGA,AQxBA,ALeA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AU9BA,ANkBA,ADGA,AQxBA,ALeA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AYpCA,AFMA,APqBA,AQxBA,ALeA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AYpCA,AFMA,APqBA,AQxBA,ALeA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AYpCA,AFMA,APqBA,AQxBA,ALeA,ACHA,AFMA,AGTA,ACHA,ARwBA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,ACHA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,ACHA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,ACHA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AQxBA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AQxBA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AQxBA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AQxBA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AQxBA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AQxBA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AU9BA,AFMA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AU9BA,AFMA,APqBA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AQxBA,AJYA,AZoCA,ACHA;AFOA,Ae7CA,AHSA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AQxBA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AQxBA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,ACHA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,AS3BA,ARwBA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,AS3BA,ARwBA,ALeA,AU9BA,AT2BA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AYpCA,AFMA,AS3BA,ARwBA,ALeA,ACHA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AS3BA,ARwBA,ALeA,ACHA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AS3BA,ARwBA,ALeA,ACHA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AS3BA,ARwBA,ALeA,ACHA,AFMA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AS3BA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AGTA,ACHA,AS3BA,ADGA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AS3BA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AGTA,ACHA,AQxBA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AS3BA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AGTA,ACHA,AQxBA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AGTA,ACHA,AQxBA,AJYA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AGTA,ACHA,AIZA,AZoCA,ACHA;AFOA,AoB5DA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AGTA,ACHA,AIZA,AXiCA;AFOA,AoB5DA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AkBtDA,Af6CA,ACHA,AIZA,AXiCA;AFOA,AoB5DA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AkBtDA,Af6CA,ACHA,AIZA,AXiCA;AFOA,AoB5DA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AkBtDA,Af6CA,ACHA,AIZA,AXiCA;AFOA,AwBxEA,AJYA,ARwBA,AFMA,AYpCA,AHSA,ARwBA,ALeA,ACHA,Ac1CA,AhBgDA,AkBtDA,Af6CA,ACHA,AIZA,AXiCA;AFOA,AwBxEA,AJYA,AV8BA,AYpCA,AHSA,ARwBA,ALeA,ACHA,AFMA,AkBtDA,Af6CA,ACHA,AIZA,AXiCA;AFOA,AwBxEA,AJYA,AV8BA,AYpCA,AHSA,ARwBA,ALeA,ACHA,AFMA,AkBtDA,Af6CA,ACHA,AIZA,AXiCA;AFOA,AwBxEA,ACHA,ALeA,AV8BA,AYpCA,AHSA,AbuCA,ACHA,AFMA,AkBtDA,Af6CA,ANkBA;AFOA,AwBxEA,ACHA,ALeA,AV8BA,AYpCA,AHSA,AbuCA,ACHA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,ALeA,AV8BA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AwBxEA,ACHA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AyB3EA,Af6CA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AYpCA,AHSA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AkBtDA,ArB+DA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AHSA;AFOA,AU9BA,AS3BA,AZoCA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AFOA,AU9BA,AHSA,AFMA,AHSA;AQvBA,AHSA,AFMA,AHSA;AQvBA,AHSA,AFMA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AQvBA,ALeA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// 引入全局mixin\r\nvar __TEMP__ = require('./libs/mixin/mixin.js');var mixin = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 引入关于是否mixin集成小程序分享的配置\r\n// import wxshare from './libs/mixin/mpShare.js'\r\n// 全局挂载引入http相关请求拦截插件\r\nvar __TEMP__ = require('./libs/request');var http = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\nfunction wranning(str) {\r\n\t// 开发环境进行信息输出,主要是一些报错信息\r\n\t// 这个环境的来由是在程序编写时候,点击hx编辑器运行调试代码的时候,详见:\r\n\t// \thttps://uniapp.dcloud.io/frame?id=%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83%e5%92%8c%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83\r\n\tif (process.env.NODE_ENV === 'development') {\r\n\t\tconsole.warn(str)\r\n\t}\r\n}\r\n\r\n// 尝试判断在根目录的/store中是否有$u.mixin.js，此文件uView默认为需要挂在到全局的vuex的state变量\r\n// HX2.6.11版本,放到try中,控制台依然会警告,暂时不用此方式，\r\n// let vuexStore = {};\r\n// try {\r\n// \tvuexStore = require(\"@/store/$u.mixin.js\");\r\n// } catch (e) {\r\n// \t//TODO handle the exception\r\n// }\r\n\r\n// post类型对象参数转为get类型url参数\r\nvar __TEMP__ = require('./libs/function/queryParams.js');var queryParams = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 路由封装\r\nvar __TEMP__ = require('./libs/function/route.js');var route = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 时间格式化\r\nvar __TEMP__ = require('./libs/function/timeFormat.js');var timeFormat = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 时间戳格式化,返回多久之前\r\nvar __TEMP__ = require('./libs/function/timeFrom.js');var timeFrom = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 颜色渐变相关,colorGradient-颜色渐变,hexToRgb-十六进制颜色转rgb颜色,rgbToHex-rgb转十六进制\r\nvar __TEMP__ = require('./libs/function/colorGradient.js');var colorGradient = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 生成全局唯一guid字符串\r\nvar __TEMP__ = require('./libs/function/guid.js');var guid = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 主题相关颜色,info|success|warning|primary|default|error,此颜色已在uview.scss中定义,但是为js中也能使用,故也定义一份\r\nvar __TEMP__ = require('./libs/function/color.js');var color = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 根据type获取图标名称\r\nvar __TEMP__ = require('./libs/function/type2icon.js');var type2icon = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 打乱数组的顺序\r\nvar __TEMP__ = require('./libs/function/randomArray.js');var randomArray = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 对象和数组的深度克隆\r\nvar __TEMP__ = require('./libs/function/deepClone.js');var deepClone = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 对象深度拷贝\r\nvar __TEMP__ = require('./libs/function/deepMerge.js');var deepMerge = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 添加单位\r\nvar __TEMP__ = require('./libs/function/addUnit.js');var addUnit = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\n// 规则检验\r\nvar __TEMP__ = require('./libs/function/test.js');var test = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 随机数\r\nvar __TEMP__ = require('./libs/function/random.js');var random = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 去除空格\r\nvar __TEMP__ = require('./libs/function/trim.js');var trim = __REQUIRE_DEFAULT__(__TEMP__);\r\n// toast提示，对uni.showToast的封装\r\nvar __TEMP__ = require('./libs/function/toast.js');var toast = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 获取父组件参数\r\nvar __TEMP__ = require('./libs/function/getParent.js');var getParent = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 获取整个父组件\r\nvar __TEMP__ = require('./libs/function/$parent.js');var $parent = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 获取sys()和os()工具方法\r\n// 获取设备信息，挂载到$u的sys()(system的缩写)属性中，\r\n// 同时把安卓和ios平台的名称\"ios\"和\"android\"挂到$u.os()中，方便取用\r\nvar __TEMP__ = require('./libs/function/sys.js');var sys = __TEMP__['sys'];var os = __TEMP__['os'];\r\n// 防抖方法\r\nvar __TEMP__ = require('./libs/function/debounce.js');var debounce = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 节流方法\r\nvar __TEMP__ = require('./libs/function/throttle.js');var throttle = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\n\r\n// 配置信息\r\nvar __TEMP__ = require('./libs/config/config.js');var config = __REQUIRE_DEFAULT__(__TEMP__);\r\n// 各个需要fixed的地方的z-index配置文件\r\nvar __TEMP__ = require('./libs/config/zIndex.js');var zIndex = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\nconst $u = {\r\n\tqueryParams: queryParams,\r\n\troute: route,\r\n\ttimeFormat: timeFormat,\r\n\tdate: timeFormat, // 另名date\r\n\ttimeFrom,\r\n\tcolorGradient: colorGradient.colorGradient,\r\n\tcolorToRgba: colorGradient.colorToRgba,\r\n\tguid,\r\n\tcolor,\r\n\tsys,\r\n\tos,\r\n\ttype2icon,\r\n\trandomArray,\r\n\twranning,\r\n\tget: http.get,\r\n\tpost: http.post,\r\n\tput: http.put,\r\n\t'delete': http.delete,\r\n\thexToRgb: colorGradient.hexToRgb,\r\n\trgbToHex: colorGradient.rgbToHex,\r\n\ttest,\r\n\trandom,\r\n\tdeepClone,\r\n\tdeepMerge,\r\n\tgetParent,\r\n\t$parent,\r\n\taddUnit,\r\n\ttrim,\r\n\ttype: ['primary', 'success', 'error', 'warning', 'info'],\r\n\thttp,\r\n\ttoast,\r\n\tconfig, // uView配置信息相关，比如版本号\r\n\tzIndex,\r\n\tdebounce,\r\n\tthrottle,\r\n}\r\n\r\n// $u挂载到uni对象上\r\nuni.$u = $u\r\n\r\nconst install = Vue => {\r\n\tVue.mixin(mixin) \r\n\tif (Vue.prototype.openShare) {\r\n\t\tVue.mixin(mpShare);\r\n\t}\r\n\t// Vue.mixin(vuexStore);\r\n\t// 时间格式化，同时两个名称，date和timeFormat\r\n\tVue.filter('timeFormat', (timestamp, format) => {\r\n\t\treturn timeFormat(timestamp, format)\r\n\t})\r\n\tVue.filter('date', (timestamp, format) => {\r\n\t\treturn timeFormat(timestamp, format)\r\n\t})\r\n\t// 将多久以前的方法，注入到全局过滤器\r\n\tVue.filter('timeFrom', (timestamp, format) => {\r\n\t\treturn timeFrom(timestamp, format)\r\n\t})\r\n\tVue.prototype.$u = $u\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\r\n\tinstall\r\n};","module.exports = {\r\n\tdata() {\r\n\t\treturn {}\r\n\t},\r\n\tonLoad() {\r\n\t\t// getRect挂载到$u上，因为这方法需要使用in(this)，所以无法把它独立成一个单独的文件导出\r\n\t\tthis.$u.getRect = this.$uGetRect\r\n\t},\r\n\tmethods: {\r\n\t\t// 查询节点信息\r\n\t\t// 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)\r\n\t\t// 解决办法为在组件根部再套一个没有任何作用的view元素\r\n\t\t$uGetRect(selector, all) {\r\n\t\t\treturn new Promise(resolve => {\r\n\t\t\t\tuni.createSelectorQuery().\r\n\t\t\t\tin(this)[all ? 'selectAll' : 'select'](selector)\r\n\t\t\t\t\t.boundingClientRect(rect => {\r\n\t\t\t\t\t\tif (all && Array.isArray(rect) && rect.length) {\r\n\t\t\t\t\t\t\tresolve(rect)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!all && rect) {\r\n\t\t\t\t\t\t\tresolve(rect)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.exec()\r\n\t\t\t})\r\n\t\t},\r\n\t\tgetParentData(parentName = '') {\r\n\t\t\t// 避免在created中去定义parent变量\r\n\t\t\tif(!this.parent) this.parent = false;\r\n\t\t\t// 这里的本质原理是，通过获取父组件实例(也即u-radio-group的this)\r\n\t\t\t// 将父组件this中对应的参数，赋值给本组件(u-radio的this)的parentData对象中对应的属性\r\n\t\t\t// 之所以需要这么做，是因为所有端中，头条小程序不支持通过this.parent.xxx去监听父组件参数的变化\r\n\t\t\tthis.parent = this.$u.$parent.call(this, parentName);\r\n\t\t\tif(this.parent) {\r\n\t\t\t\t// 历遍parentData中的属性，将parent中的同名属性赋值给parentData\r\n\t\t\t\tObject.keys(this.parentData).map(key => {\r\n\t\t\t\t\tthis.parentData[key] = this.parent[key];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\t// 阻止事件冒泡\r\n\t\tpreventEvent(e) {\r\n\t\t\te && e.stopPropagation && e.stopPropagation()\r\n\t\t}\r\n\t},\r\n\tonReachBottom() {\r\n\t\tuni.$emit('uOnReachBottom')\r\n\t},\r\n\tbeforeDestroy() {\r\n\t\t// 判断当前页面是否存在parent和chldren，一般在checkbox和checkbox-group父子联动的场景会有此情况\r\n\t\t// 组件销毁时，移除子组件在父组件children数组中的实例，释放资源，避免数据混乱\r\n\t\tif(this.parent && uni.$u.test.array(this.parent.children)) {\r\n\t\t\t// 组件销毁时，移除父组件中的children数组中对应的实例\r\n\t\t\tconst childrenList = this.parent.children\r\n\t\t\tchildrenList.map((child, index) => {\r\n\t\t\t\t// 如果相等，则移除\r\n\t\t\t\tif(child === this) {\r\n\t\t\t\t\tchildrenList.splice(index, 1)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n","var __TEMP__ = require('../function/deepMerge');var deepMerge = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('../function/test');var validate = __REQUIRE_DEFAULT__(__TEMP__);\r\nclass Request {\r\n\t// 设置全局默认配置\r\n\tsetConfig(customConfig) {\r\n\t\t// 深度合并对象，否则会造成对象深层属性丢失\r\n\t\tthis.config = deepMerge(this.config, customConfig);\r\n\t}\r\n\r\n\t// 主要请求部分\r\n\trequest(options = {}) {\r\n\t\t// 检查请求拦截\r\n\t\tif (this.interceptor.request && typeof this.interceptor.request === 'function') {\r\n\t\t\tlet tmpConfig = {};\r\n\t\t\tlet interceptorRequest = this.interceptor.request(options);\r\n\t\t\tif (interceptorRequest === false) {\r\n\t\t\t\t// 返回一个处于pending状态中的Promise，来取消原promise，避免进入then()回调\r\n\t\t\t\treturn new Promise(()=>{});\r\n\t\t\t}\r\n\t\t\tthis.options = interceptorRequest;\r\n\t\t}\r\n\t\toptions.dataType = options.dataType || this.config.dataType;\r\n\t\toptions.responseType = options.responseType || this.config.responseType;\r\n\t\toptions.url = options.url || '';\r\n\t\toptions.params = options.params || {};\r\n\t\toptions.header = Object.assign({}, this.config.header, options.header);\r\n\t\toptions.method = options.method || this.config.method;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\toptions.complete = (response) => {\r\n\t\t\t\t// 请求返回后，隐藏loading(如果请求返回快的话，可能会没有loading)\r\n\t\t\t\tuni.hideLoading();\r\n\t\t\t\t// 清除定时器，如果请求回来了，就无需loading\r\n\t\t\t\tclearTimeout(this.config.timer);\r\n\t\t\t\tthis.config.timer = null;\r\n\t\t\t\t// 判断用户对拦截返回数据的要求，如果originalData为true，返回所有的数据(response)到拦截器，否则只返回response.data\r\n\t\t\t\tif(this.config.originalData) {\r\n\t\t\t\t\t// 判断是否存在拦截器\r\n\t\t\t\t\tif (this.interceptor.response && typeof this.interceptor.response === 'function') {\r\n\t\t\t\t\t\tlet resInterceptors = this.interceptor.response(response);\r\n\t\t\t\t\t\t// 如果拦截器不返回false，就将拦截器返回的内容给this.$u.post的then回调\r\n\t\t\t\t\t\tif (resInterceptors !== false) {\r\n\t\t\t\t\t\t\tresolve(resInterceptors);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 如果拦截器返回false，意味着拦截器定义者认为返回有问题，直接接入catch回调\r\n\t\t\t\t\t\t\treject(response);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 如果要求返回原始数据，就算没有拦截器，也返回最原始的数据\r\n\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (response.statusCode == 200) {\r\n\t\t\t\t\t\tif (this.interceptor.response && typeof this.interceptor.response === 'function') {\r\n\t\t\t\t\t\t\tlet resInterceptors = this.interceptor.response(response.data);\r\n\t\t\t\t\t\t\tif (resInterceptors !== false) {\r\n\t\t\t\t\t\t\t\tresolve(resInterceptors);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treject(response.data);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 如果不是返回原始数据(originalData=false)，且没有拦截器的情况下，返回纯数据给then回调\r\n\t\t\t\t\t\t\tresolve(response.data);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 不返回原始数据的情况下，服务器状态码不为200，modal弹框提示\r\n\t\t\t\t\t\t// if(response.errMsg) {\r\n\t\t\t\t\t\t// \tuni.showModal({\r\n\t\t\t\t\t\t// \t\ttitle: response.errMsg\r\n\t\t\t\t\t\t// \t});\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\treject(response)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 判断用户传递的URL是否/开头,如果不是,加上/，这里使用了uView的test.js验证库的url()方法\r\n\t\t\toptions.url = validate.url(options.url) ? options.url : (this.config.baseUrl + (options.url.indexOf('/') == 0 ?\r\n\t\t\t\toptions.url : '/' + options.url));\r\n\t\t\t\r\n\t\t\t// 是否显示loading\r\n\t\t\t// 加一个是否已有timer定时器的判断，否则有两个同时请求的时候，后者会清除前者的定时器id\r\n\t\t\t// 而没有清除前者的定时器，导致前者超时，一直显示loading\r\n\t\t\tif(this.config.showLoading && !this.config.timer) {\r\n\t\t\t\tthis.config.timer = setTimeout(() => {\r\n\t\t\t\t\tuni.showLoading({\r\n\t\t\t\t\t\ttitle: this.config.loadingText,\r\n\t\t\t\t\t\tmask: this.config.loadingMask\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.config.timer = null;\r\n\t\t\t\t}, this.config.loadingTime);\r\n\t\t\t}\r\n\t\t\tuni.request(options);\r\n\t\t})\r\n\t\t// .catch(res => {\r\n\t\t// \t// 如果返回reject()，不让其进入this.$u.post().then().catch()后面的catct()\r\n\t\t// \t// 因为很多人都会忘了写后面的catch()，导致报错捕获不到catch\r\n\t\t// \treturn new Promise(()=>{});\r\n\t\t// })\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tthis.config = {\r\n\t\t\tbaseUrl: '', // 请求的根域名\r\n\t\t\t// 默认的请求头\r\n\t\t\theader: {},\r\n\t\t\tmethod: 'POST',\r\n\t\t\t// 设置为json，返回后uni.request会对数据进行一次JSON.parse\r\n\t\t\tdataType: 'json',\r\n\t\t\t// 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可\r\n\t\t\tresponseType: 'text',\r\n\t\t\tshowLoading: true, // 是否显示请求中的loading\r\n\t\t\tloadingText: '请求中...',\r\n\t\t\tloadingTime: 800, // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms\r\n\t\t\ttimer: null, // 定时器\r\n\t\t\toriginalData: false, // 是否在拦截器中返回服务端的原始数据，见文档说明\r\n\t\t\tloadingMask: true, // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透\r\n\t\t}\r\n\t\r\n\t\t// 拦截器\r\n\t\tthis.interceptor = {\r\n\t\t\t// 请求前的拦截\r\n\t\t\trequest: null,\r\n\t\t\t// 请求后的拦截\r\n\t\t\tresponse: null\r\n\t\t}\r\n\r\n\t\t// get请求\r\n\t\tthis.get = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl,\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// post请求\r\n\t\tthis.post = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t\t\r\n\t\t// put请求，不支持支付宝小程序(HX2.6.15)\r\n\t\tthis.put = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod: 'PUT',\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t\t\r\n\t\t// delete请求，不支持支付宝和头条小程序(HX2.6.15)\r\n\t\tthis.delete = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = new Request;\r\n","var __TEMP__ = require('./deepClone');var deepClone = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\n// JS对象深度合并\r\nfunction deepMerge(target = {}, source = {}) {\r\n\ttarget = deepClone(target);\r\n\tif (typeof target !== 'object' || typeof source !== 'object') return false;\r\n\tfor (var prop in source) {\r\n\t\tif (!source.hasOwnProperty(prop)) continue;\r\n\t\tif (prop in target) {\r\n\t\t\tif (typeof target[prop] !== 'object') {\r\n\t\t\t\ttarget[prop] = source[prop];\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof source[prop] !== 'object') {\r\n\t\t\t\t\ttarget[prop] = source[prop];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (target[prop].concat && source[prop].concat) {\r\n\t\t\t\t\t\ttarget[prop] = target[prop].concat(source[prop]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttarget[prop] = deepMerge(target[prop], source[prop]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttarget[prop] = source[prop];\r\n\t\t}\r\n\t}\r\n\treturn target;\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = deepMerge;","// 判断arr是否为一个数组，返回一个bool值\r\nfunction isArray (arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n}\r\n\r\n// 深度克隆\r\nfunction deepClone (obj) {\r\n\t// 对常见的“非”值，直接返回原来值\r\n\tif([null, undefined, NaN, false].includes(obj)) return obj;\r\n    if(typeof obj !== \"object\" && typeof obj !== 'function') {\r\n\t\t//原始类型直接返回\r\n        return obj;\r\n    }\r\n    var o = isArray(obj) ? [] : {};\r\n    for(let i in obj) {\r\n        if(obj.hasOwnProperty(i)){\r\n            o[i] = typeof obj[i] === \"object\" ? deepClone(obj[i]) : obj[i];\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = deepClone;\r\n","/**\r\n * 验证电子邮箱格式\r\n */\r\nfunction email(value) {\r\n\treturn /^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/.test(value);\r\n}\r\n\r\n/**\r\n * 验证手机格式\r\n */\r\nfunction mobile(value) {\r\n\treturn /^1[3-9]\\d{9}$/.test(value)\r\n}\r\n\r\n/**\r\n * 验证URL格式\r\n */\r\nfunction url(value) {\r\n\treturn /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w-.\\/?%&=]*)?/.test(value)\r\n}\r\n\r\n/**\r\n * 验证日期格式\r\n */\r\nfunction date(value) {\r\n\treturn !/Invalid|NaN/.test(new Date(value).toString())\r\n}\r\n\r\n/**\r\n * 验证ISO类型的日期格式\r\n */\r\nfunction dateISO(value) {\r\n\treturn /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(value)\r\n}\r\n\r\n/**\r\n * 验证十进制数字\r\n */\r\nfunction number(value) {\r\n\treturn /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(value)\r\n}\r\n\r\n/**\r\n * 验证整数\r\n */\r\nfunction digits(value) {\r\n\treturn /^\\d+$/.test(value)\r\n}\r\n\r\n/**\r\n * 验证身份证号码\r\n */\r\nfunction idCard(value) {\r\n\treturn /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(\r\n\t\tvalue)\r\n}\r\n\r\n/**\r\n * 是否车牌号\r\n */\r\nfunction carNo(value) {\r\n\t// 新能源车牌\r\n\tconst xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;\r\n\t// 旧车牌\r\n\tconst creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;\r\n\tif (value.length === 7) {\r\n\t\treturn creg.test(value);\r\n\t} else if (value.length === 8) {\r\n\t\treturn xreg.test(value);\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * 金额,只允许2位小数\r\n */\r\nfunction amount(value) {\r\n\t//金额，只允许保留两位小数\r\n\treturn /^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0\\.\\d{1,2}$/.test(value);\r\n}\r\n\r\n/**\r\n * 中文\r\n */\r\nfunction chinese(value) {\r\n\tlet reg = /^[\\u4e00-\\u9fa5]+$/gi;\r\n\treturn reg.test(value);\r\n}\r\n\r\n/**\r\n * 只能输入字母\r\n */\r\nfunction letter(value) {\r\n\treturn /^[a-zA-Z]*$/.test(value);\r\n}\r\n\r\n/**\r\n * 只能是字母或者数字\r\n */\r\nfunction enOrNum(value) {\r\n\t//英文或者数字\r\n\tlet reg = /^[0-9a-zA-Z]*$/g;\r\n\treturn reg.test(value);\r\n}\r\n\r\n/**\r\n * 验证是否包含某个值\r\n */\r\nfunction contains(value, param) {\r\n\treturn value.indexOf(param) >= 0\r\n}\r\n\r\n/**\r\n * 验证一个值范围[min, max]\r\n */\r\nfunction range(value, param) {\r\n\treturn value >= param[0] && value <= param[1]\r\n}\r\n\r\n/**\r\n * 验证一个长度范围[min, max]\r\n */\r\nfunction rangeLength(value, param) {\r\n\treturn value.length >= param[0] && value.length <= param[1]\r\n}\r\n\r\n/**\r\n * 是否固定电话\r\n */\r\nfunction landline(value) {\r\n\tlet reg = /^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$/;\r\n\treturn reg.test(value);\r\n}\r\n\r\n/**\r\n * 判断是否为空\r\n */\r\nfunction empty(value) {\r\n\tswitch (typeof value) {\r\n\t\tcase 'undefined':\r\n\t\t\treturn true;\r\n\t\tcase 'string':\r\n\t\t\tif (value.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '').length == 0) return true;\r\n\t\t\tbreak;\r\n\t\tcase 'boolean':\r\n\t\t\tif (!value) return true;\r\n\t\t\tbreak;\r\n\t\tcase 'number':\r\n\t\t\tif (0 === value || isNaN(value)) return true;\r\n\t\t\tbreak;\r\n\t\tcase 'object':\r\n\t\t\tif (null === value || value.length === 0) return true;\r\n\t\t\tfor (var i in value) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * 是否json字符串\r\n */\r\nfunction jsonString(value) {\r\n\tif (typeof value == 'string') {\r\n\t\ttry {\r\n\t\t\tvar obj = JSON.parse(value);\r\n\t\t\tif (typeof obj == 'object' && obj) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\n/**\r\n * 是否数组\r\n */\r\nfunction array(value) {\r\n\tif (typeof Array.isArray === \"function\") {\r\n\t\treturn Array.isArray(value);\r\n\t} else {\r\n\t\treturn Object.prototype.toString.call(value) === \"[object Array]\";\r\n\t}\r\n}\r\n\r\n/**\r\n * 是否对象\r\n */\r\nfunction object(value) {\r\n\treturn Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\n\r\n/**\r\n * 是否短信验证码\r\n */\r\nfunction code(value, len = 6) {\r\n\treturn new RegExp(`^\\\\d{${len}}$`).test(value);\r\n}\r\n\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\r\n\temail,\r\n\tmobile,\r\n\turl,\r\n\tdate,\r\n\tdateISO,\r\n\tnumber,\r\n\tdigits,\r\n\tidCard,\r\n\tcarNo,\r\n\tamount,\r\n\tchinese,\r\n\tletter,\r\n\tenOrNum,\r\n\tcontains,\r\n\trange,\r\n\trangeLength,\r\n\tempty,\r\n\tisEmpty: empty,\r\n\tjsonString,\r\n\tlandline,\r\n\tobject,\r\n\tarray,\r\n\tcode\r\n};\r\n","/**\r\n * 对象转url参数\r\n * @param {*} data,对象\r\n * @param {*} isPrefix,是否自动加上\"?\"\r\n */\r\nfunction queryParams(data = {}, isPrefix = true, arrayFormat = 'brackets') {\r\n\tlet prefix = isPrefix ? '?' : ''\r\n\tlet _result = []\r\n\tif (['indices', 'brackets', 'repeat', 'comma'].indexOf(arrayFormat) == -1) arrayFormat = 'brackets';\r\n\tfor (let key in data) {\r\n\t\tlet value = data[key]\r\n\t\t// 去掉为空的参数\r\n\t\tif (['', undefined, null].indexOf(value) >= 0) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t// 如果值为数组，另行处理\r\n\t\tif (value.constructor === Array) {\r\n\t\t\t// e.g. {ids: [1, 2, 3]}\r\n\t\t\tswitch (arrayFormat) {\r\n\t\t\t\tcase 'indices':\r\n\t\t\t\t\t// 结果: ids[0]=1&ids[1]=2&ids[2]=3\r\n\t\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\t\t_result.push(key + '[' + i + ']=' + value[i])\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'brackets':\r\n\t\t\t\t\t// 结果: ids[]=1&ids[]=2&ids[]=3\r\n\t\t\t\t\tvalue.forEach(_value => {\r\n\t\t\t\t\t\t_result.push(key + '[]=' + _value)\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'repeat':\r\n\t\t\t\t\t// 结果: ids=1&ids=2&ids=3\r\n\t\t\t\t\tvalue.forEach(_value => {\r\n\t\t\t\t\t\t_result.push(key + '=' + _value)\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'comma':\r\n\t\t\t\t\t// 结果: ids=1,2,3\r\n\t\t\t\t\tlet commaStr = \"\";\r\n\t\t\t\t\tvalue.forEach(_value => {\r\n\t\t\t\t\t\tcommaStr += (commaStr ? \",\" : \"\") + _value;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t_result.push(key + '=' + commaStr)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tvalue.forEach(_value => {\r\n\t\t\t\t\t\t_result.push(key + '[]=' + _value)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t_result.push(key + '=' + value)\r\n\t\t}\r\n\t}\r\n\treturn _result.length ? prefix + _result.join('&') : ''\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = queryParams;\r\n","/**\r\n * 路由跳转方法，该方法相对于直接使用uni.xxx的好处是使用更加简单快捷\r\n * 并且带有路由拦截功能\r\n */\r\n\r\nclass Router {\r\n\tconstructor() {\r\n\t\t// 原始属性定义\r\n\t\tthis.config = {\r\n\t\t\ttype: 'navigateTo',\r\n\t\t\turl: '',\r\n\t\t\tdelta: 1, // navigateBack页面后退时,回退的层数\r\n\t\t\tparams: {}, // 传递的参数\r\n\t\t\tanimationType: 'pop-in', // 窗口动画,只在APP有效\r\n\t\t\tanimationDuration: 300, // 窗口动画持续时间,单位毫秒,只在APP有效\r\n\t\t\tintercept: false, // 是否需要拦截\r\n\t\t}\r\n\t\t// 因为route方法是需要对外赋值给另外的对象使用，同时route内部有使用this，会导致route失去上下文\r\n\t\t// 这里在构造函数中进行this绑定\r\n\t\tthis.route = this.route.bind(this)\r\n\t}\r\n\r\n\t// 判断url前面是否有\"/\"，如果没有则加上，否则无法跳转\r\n\taddRootPath(url) {\r\n\t\treturn url[0] === '/' ? url : `/${url}`\r\n\t}\r\n\r\n\t// 整合路由参数\r\n\tmixinParam(url, params) {\r\n\t\turl = url && this.addRootPath(url)\r\n\t\t\r\n\t\t// 使用正则匹配，主要依据是判断是否有\"/\",\"?\",\"=\"等，如“/page/index/index?name=mary\"\r\n\t\t// 如果有url中有get参数，转换后无需带上\"?\"\r\n\t\tlet query = ''\r\n\t\tif (/.*\\/.*\\?.*=.*/.test(url)) {\r\n\t\t\t// object对象转为get类型的参数\r\n\t\t\tquery = uni.$u.queryParams(params, false);\r\n\t\t\t// 因为已有get参数,所以后面拼接的参数需要带上\"&\"隔开\r\n\t\t\treturn url += \"&\" + query\r\n\t\t} else {\r\n\t\t\t// 直接拼接参数，因为此处url中没有后面的query参数，也就没有\"?/&\"之类的符号\r\n\t\t\tquery = uni.$u.queryParams(params);\r\n\t\t\treturn url += query\r\n\t\t}\r\n\t}\r\n\r\n\t// 对外的方法名称\r\n\tasync route(options = {}, params = {}) {\r\n\t\t// 合并用户的配置和内部的默认配置\r\n\t\tlet mergeConfig = {}\r\n\r\n\t\tif (typeof options === 'string') {\r\n\t\t\t// 如果options为字符串，则为route(url, params)的形式\r\n\t\t\tmergeConfig.url = this.mixinParam(options, params)\r\n\t\t\tmergeConfig.type = 'navigateTo'\r\n\t\t} else {\r\n\t\t\tmergeConfig = uni.$u.deepClone(options, this.config)\r\n\t\t\t// 否则正常使用mergeConfig中的url和params进行拼接\r\n\t\t\tmergeConfig.url = this.mixinParam(options.url, options.params)\r\n\t\t}\r\n\t\t\r\n\t\tif(params.intercept) {\r\n\t\t\tthis.config.intercept = params.intercept\r\n\t\t}\r\n\t\t// params参数也带给拦截器\r\n\t\tmergeConfig.params = params\r\n\t\t// 合并内外部参数\r\n\t\tmergeConfig = uni.$u.deepMerge(this.config, mergeConfig)\r\n\t\t// 判断用户是否定义了拦截器\r\n\t\tif (typeof uni.$u.routeIntercept === 'function') {\r\n\t\t\t// 定一个promise，根据用户执行resolve(true)或者resolve(false)来决定是否进行路由跳转\r\n\t\t\tconst isNext = await new Promise((resolve, reject) => {\r\n\t\t\t\tuni.$u.routeIntercept(mergeConfig, resolve)\r\n\t\t\t})\r\n\t\t\t// 如果isNext为true，则执行路由跳转\r\n\t\t\tisNext && this.openPage(mergeConfig)\r\n\t\t} else {\r\n\t\t\tthis.openPage(mergeConfig)\r\n\t\t}\r\n\t}\r\n\r\n\t// 执行路由跳转\r\n\topenPage(config) {\r\n\t\t// 解构参数\r\n\t\tconst {\r\n\t\t\turl,\r\n\t\t\ttype,\r\n\t\t\tdelta,\r\n\t\t\tanimationType,\r\n\t\t\tanimationDuration\r\n\t\t} = config\r\n\t\tif (config.type == 'navigateTo' || config.type == 'to') {\r\n\t\t\tuni.navigateTo({\r\n\t\t\t\turl,\r\n\t\t\t\tanimationType,\r\n\t\t\t\tanimationDuration\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (config.type == 'redirectTo' || config.type == 'redirect') {\r\n\t\t\tuni.redirectTo({\r\n\t\t\t\turl\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (config.type == 'switchTab' || config.type == 'tab') {\r\n\t\t\tuni.switchTab({\r\n\t\t\t\turl\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (config.type == 'reLaunch' || config.type == 'launch') {\r\n\t\t\tuni.reLaunch({\r\n\t\t\t\turl\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (config.type == 'navigateBack' || config.type == 'back') {\r\n\t\t\tuni.navigateBack({\r\n\t\t\t\tdelta\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = (new Router()).route;","// padStart 的 polyfill，因为某些机型或情况，还无法支持es7的padStart，比如电脑版的微信小程序\r\n// 所以这里做一个兼容polyfill的兼容处理\r\nif (!String.prototype.padStart) {\r\n\t// 为了方便表示这里 fillString 用了ES6 的默认参数，不影响理解\r\n\tString.prototype.padStart = function(maxLength, fillString = ' ') {\r\n\t\tif (Object.prototype.toString.call(fillString) !== \"[object String]\") throw new TypeError(\r\n\t\t\t'fillString must be String')\r\n\t\tlet str = this\r\n\t\t// 返回 String(str) 这里是为了使返回的值是字符串字面量，在控制台中更符合直觉\r\n\t\tif (str.length >= maxLength) return String(str)\r\n\r\n\t\tlet fillLength = maxLength - str.length,\r\n\t\t\ttimes = Math.ceil(fillLength / fillString.length)\r\n\t\twhile (times >>= 1) {\r\n\t\t\tfillString += fillString\r\n\t\t\tif (times === 1) {\r\n\t\t\t\tfillString += fillString\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fillString.slice(0, fillLength) + str;\r\n\t}\r\n}\r\n\r\n// 其他更多是格式化有如下:\r\n// yyyy:mm:dd|yyyy:mm|yyyy年mm月dd日|yyyy年mm月dd日 hh时MM分等,可自定义组合\r\nfunction timeFormat(dateTime = null, fmt = 'yyyy-mm-dd') {\r\n\t// 如果为null,则格式化当前时间\r\n\tif (!dateTime) dateTime = Number(new Date());\r\n\t// 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\r\n\tif (dateTime.toString().length == 10) dateTime *= 1000;\r\n\tlet date = new Date(dateTime);\r\n\tlet ret;\r\n\tlet opt = {\r\n\t\t\"y+\": date.getFullYear().toString(), // 年\r\n\t\t\"m+\": (date.getMonth() + 1).toString(), // 月\r\n\t\t\"d+\": date.getDate().toString(), // 日\r\n\t\t\"h+\": date.getHours().toString(), // 时\r\n\t\t\"M+\": date.getMinutes().toString(), // 分\r\n\t\t\"s+\": date.getSeconds().toString() // 秒\r\n\t\t// 有其他格式化字符需求可以继续添加，必须转化成字符串\r\n\t};\r\n\tfor (let k in opt) {\r\n\t\tret = new RegExp(\"(\" + k + \")\").exec(fmt);\r\n\t\tif (ret) {\r\n\t\t\tfmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, \"0\")))\r\n\t\t};\r\n\t};\r\n\treturn fmt;\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = timeFormat;\r\n","var __TEMP__ = require('../../libs/function/timeFormat.js');var timeFormat = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\n/**\r\n * 时间戳转为多久之前\r\n * @param String timestamp 时间戳\r\n * @param String | Boolean format 如果为时间格式字符串，超出一定时间范围，返回固定的时间格式；\r\n * 如果为布尔值false，无论什么时间，都返回多久以前的格式\r\n */\r\nfunction timeFrom(dateTime = null, format = 'yyyy-mm-dd') {\r\n\t// 如果为null,则格式化当前时间\r\n\tif (!dateTime) dateTime = Number(new Date());\r\n\t// 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\r\n\tif (dateTime.toString().length == 10) dateTime *= 1000;\r\n\tlet timestamp = + new Date(Number(dateTime));\r\n\r\n\tlet timer = (Number(new Date()) - timestamp) / 1000;\r\n\t// 如果小于5分钟,则返回\"刚刚\",其他以此类推\r\n\tlet tips = '';\r\n\tswitch (true) {\r\n\t\tcase timer < 300:\r\n\t\t\ttips = '刚刚';\r\n\t\t\tbreak;\r\n\t\tcase timer >= 300 && timer < 3600:\r\n\t\t\ttips = parseInt(timer / 60) + '分钟前';\r\n\t\t\tbreak;\r\n\t\tcase timer >= 3600 && timer < 86400:\r\n\t\t\ttips = parseInt(timer / 3600) + '小时前';\r\n\t\t\tbreak;\r\n\t\tcase timer >= 86400 && timer < 2592000:\r\n\t\t\ttips = parseInt(timer / 86400) + '天前';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// 如果format为false，则无论什么时间戳，都显示xx之前\r\n\t\t\tif(format === false) {\r\n\t\t\t\tif(timer >= 2592000 && timer < 365 * 86400) {\r\n\t\t\t\t\ttips = parseInt(timer / (86400 * 30)) + '个月前';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttips = parseInt(timer / (86400 * 365)) + '年前';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttips = timeFormat(timestamp, format);\r\n\t\t\t}\r\n\t}\r\n\treturn tips;\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = timeFrom;\r\n","/**\r\n * 求两个颜色之间的渐变值\r\n * @param {string} startColor 开始的颜色\r\n * @param {string} endColor 结束的颜色\r\n * @param {number} step 颜色等分的份额\r\n * */\r\nfunction colorGradient(startColor = 'rgb(0, 0, 0)', endColor = 'rgb(255, 255, 255)', step = 10) {\r\n\tlet startRGB = hexToRgb(startColor, false); //转换为rgb数组模式\r\n\tlet startR = startRGB[0];\r\n\tlet startG = startRGB[1];\r\n\tlet startB = startRGB[2];\r\n\r\n\tlet endRGB = hexToRgb(endColor, false);\r\n\tlet endR = endRGB[0];\r\n\tlet endG = endRGB[1];\r\n\tlet endB = endRGB[2];\r\n\r\n\tlet sR = (endR - startR) / step; //总差值\r\n\tlet sG = (endG - startG) / step;\r\n\tlet sB = (endB - startB) / step;\r\n\tlet colorArr = [];\r\n\tfor (let i = 0; i < step; i++) {\r\n\t\t//计算每一步的hex值 \r\n\t\tlet hex = rgbToHex('rgb(' + Math.round((sR * i + startR)) + ',' + Math.round((sG * i + startG)) + ',' + Math.round((sB *\r\n\t\t\ti + startB)) + ')');\r\n\t\tcolorArr.push(hex);\r\n\t}\r\n\treturn colorArr;\r\n}\r\n\r\n// 将hex表示方式转换为rgb表示方式(这里返回rgb数组模式)\r\nfunction hexToRgb(sColor, str = true) {\r\n\tlet reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n\tsColor = sColor.toLowerCase();\r\n\tif (sColor && reg.test(sColor)) {\r\n\t\tif (sColor.length === 4) {\r\n\t\t\tlet sColorNew = \"#\";\r\n\t\t\tfor (let i = 1; i < 4; i += 1) {\r\n\t\t\t\tsColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\r\n\t\t\t}\r\n\t\t\tsColor = sColorNew;\r\n\t\t}\r\n\t\t//处理六位的颜色值\r\n\t\tlet sColorChange = [];\r\n\t\tfor (let i = 1; i < 7; i += 2) {\r\n\t\t\tsColorChange.push(parseInt(\"0x\" + sColor.slice(i, i + 2)));\r\n\t\t}\r\n\t\tif(!str) {\r\n\t\t\treturn sColorChange;\r\n\t\t} else {\r\n\t\t\treturn `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;\r\n\t\t}\r\n\t} else if (/^(rgb|RGB)/.test(sColor)) {\r\n\t\tlet arr = sColor.replace(/(?:\\(|\\)|rgb|RGB)*/g, \"\").split(\",\")\r\n\t\treturn arr.map(val => Number(val));\r\n\t} else {\r\n\t\treturn sColor;\r\n\t}\r\n};\r\n\r\n// 将rgb表示方式转换为hex表示方式\r\nfunction rgbToHex(rgb) {\r\n\tlet _this = rgb;\r\n\tlet reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n\tif (/^(rgb|RGB)/.test(_this)) {\r\n\t\tlet aColor = _this.replace(/(?:\\(|\\)|rgb|RGB)*/g, \"\").split(\",\");\r\n\t\tlet strHex = \"#\";\r\n\t\tfor (let i = 0; i < aColor.length; i++) {\r\n\t\t\tlet hex = Number(aColor[i]).toString(16);\r\n\t\t\thex = String(hex).length == 1 ? 0 + '' + hex : hex; // 保证每个rgb的值为2位\r\n\t\t\tif (hex === \"0\") {\r\n\t\t\t\thex += hex;\r\n\t\t\t}\r\n\t\t\tstrHex += hex;\r\n\t\t}\r\n\t\tif (strHex.length !== 7) {\r\n\t\t\tstrHex = _this;\r\n\t\t}\r\n\t\treturn strHex;\r\n\t} else if (reg.test(_this)) {\r\n\t\tlet aNum = _this.replace(/#/, \"\").split(\"\");\r\n\t\tif (aNum.length === 6) {\r\n\t\t\treturn _this;\r\n\t\t} else if (aNum.length === 3) {\r\n\t\t\tlet numHex = \"#\";\r\n\t\t\tfor (let i = 0; i < aNum.length; i += 1) {\r\n\t\t\t\tnumHex += (aNum[i] + aNum[i]);\r\n\t\t\t}\r\n\t\t\treturn numHex;\r\n\t\t}\r\n\t} else {\r\n\t\treturn _this;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n* JS颜色十六进制转换为rgb或rgba,返回的格式为 rgba（255，255，255，0.5）字符串\r\n* sHex为传入的十六进制的色值\r\n* alpha为rgba的透明度\r\n*/\r\nfunction colorToRgba(color, alpha = 0.3) {\r\n\tcolor = rgbToHex(color)\r\n\t// 十六进制颜色值的正则表达式\r\n\tvar reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\r\n\t/* 16进制颜色转为RGB格式 */\r\n\tlet sColor = color.toLowerCase()\r\n\tif (sColor && reg.test(sColor)) {\r\n\t\tif (sColor.length === 4) {\r\n\t\t\tvar sColorNew = '#'\r\n\t\t\tfor (let i = 1; i < 4; i += 1) {\r\n\t\t\t\tsColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))\r\n\t\t\t}\r\n\t\t\tsColor = sColorNew\r\n\t\t}\r\n\t\t// 处理六位的颜色值\r\n\t\tvar sColorChange = []\r\n\t\tfor (let i = 1; i < 7; i += 2) {\r\n\t\t\tsColorChange.push(parseInt('0x' + sColor.slice(i, i + 2)))\r\n\t\t}\r\n\t\t// return sColorChange.join(',')\r\n\t\treturn 'rgba(' + sColorChange.join(',') + ',' + alpha + ')'\r\n\t} \r\n\telse {\r\n\t\treturn sColor\r\n\t}\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\r\n\tcolorGradient,\r\n\thexToRgb,\r\n\trgbToHex,\r\n\tcolorToRgba\r\n};","/**\r\n * 本算法来源于简书开源代码，详见：https://www.jianshu.com/p/fdbf293d0a85\r\n * 全局唯一标识符（uuid，Globally Unique Identifier）,也称作 uuid(Universally Unique IDentifier) \r\n * 一般用于多个组件之间,给它一个唯一的标识符,或者v-for循环的时候,如果使用数组的index可能会导致更新列表出现问题\r\n * 最可能的情况是左滑删除item或者对某条信息流\"不喜欢\"并去掉它的时候,会导致组件内的数据可能出现错乱\r\n * v-for的时候,推荐使用后端返回的id而不是循环的index\r\n * @param {Number} len uuid的长度\r\n * @param {Boolean} firstU 将返回的首字母置为\"u\"\r\n * @param {Nubmer} radix 生成uuid的基数(意味着返回的字符串都是这个基数),2-二进制,8-八进制,10-十进制,16-十六进制\r\n */\r\nfunction guid(len = 32, firstU = true, radix = null) {\r\n\tlet chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n\tlet uuid = [];\r\n\tradix = radix || chars.length;\r\n\r\n\tif (len) {\r\n\t\t// 如果指定uuid长度,只是取随机的字符,0|x为位运算,能去掉x的小数位,返回整数位\r\n\t\tfor (let i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\r\n\t} else {\r\n\t\tlet r;\r\n\t\t// rfc4122标准要求返回的uuid中,某些位为固定的字符\r\n\t\tuuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n\t\tuuid[14] = '4';\r\n\r\n\t\tfor (let i = 0; i < 36; i++) {\r\n\t\t\tif (!uuid[i]) {\r\n\t\t\t\tr = 0 | Math.random() * 16;\r\n\t\t\t\tuuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// 移除第一个字符,并用u替代,因为第一个字符为数值时,该guuid不能用作id或者class\r\n\tif (firstU) {\r\n\t\tuuid.shift();\r\n\t\treturn 'u' + uuid.join('');\r\n\t} else {\r\n\t\treturn uuid.join('');\r\n\t}\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = guid;\n","// 为了让用户能够自定义主题，会逐步弃用此文件，各颜色通过css提供\r\n// 为了给某些特殊场景使用和向后兼容，无需删除此文件(2020-06-20)\r\nlet color = {\r\n\tprimary: \"#2979ff\",\r\n\tprimaryDark: \"#2b85e4\",\r\n\tprimaryDisabled: \"#a0cfff\",\r\n\tprimaryLight: \"#ecf5ff\",\r\n\tbgColor: \"#f3f4f6\",\r\n\t\r\n\tinfo: \"#909399\",\r\n\tinfoDark: \"#82848a\",\r\n\tinfoDisabled: \"#c8c9cc\",\r\n\tinfoLight: \"#f4f4f5\",\r\n\t\r\n\twarning: \"#ff9900\",\r\n\twarningDark: \"#f29100\",\r\n\twarningDisabled: \"#fcbd71\",\r\n\twarningLight: \"#fdf6ec\",\r\n\t\r\n\terror: \"#fa3534\",\r\n\terrorDark: \"#dd6161\",\r\n\terrorDisabled: \"#fab6b6\",\r\n\terrorLight: \"#fef0f0\",\r\n\t\r\n\tsuccess: \"#19be6b\",\r\n\tsuccessDark: \"#18b566\",\r\n\tsuccessDisabled: \"#71d5a1\",\r\n\tsuccessLight: \"#dbf1e1\",\r\n\t\r\n\tmainColor: \"#303133\",\r\n\tcontentColor: \"#606266\",\r\n\ttipsColor: \"#909399\",\r\n\tlightColor: \"#c0c4cc\",\r\n\tborderColor: \"#e4e7ed\"\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = color;","/**\r\n * 根据主题type值,获取对应的图标\r\n * @param String type 主题名称,primary|info|error|warning|success\r\n * @param String fill 是否使用fill填充实体的图标  \r\n */\r\nfunction type2icon(type = 'success', fill = false) {\r\n\t// 如果非预置值,默认为success\r\n\tif (['primary', 'info', 'error', 'warning', 'success'].indexOf(type) == -1) type = 'success';\r\n\tlet iconName = '';\r\n\t// 目前(2019-12-12),info和primary使用同一个图标\r\n\tswitch (type) {\r\n\t\tcase 'primary':\r\n\t\t\ticonName = 'info-circle';\r\n\t\t\tbreak;\r\n\t\tcase 'info':\r\n\t\t\ticonName = 'info-circle';\r\n\t\t\tbreak;\r\n\t\tcase 'error':\r\n\t\t\ticonName = 'close-circle';\r\n\t\t\tbreak;\r\n\t\tcase 'warning':\r\n\t\t\ticonName = 'error-circle';\r\n\t\t\tbreak;\r\n\t\tcase 'success':\r\n\t\t\ticonName = 'checkmark-circle';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\ticonName = 'checkmark-circle';\r\n\t}\r\n\t// 是否是实体类型,加上-fill,在icon组件库中,实体的类名是后面加-fill的\r\n\tif (fill) iconName += '-fill';\r\n\treturn iconName;\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = type2icon;\n","// 打乱数组\r\nfunction randomArray(array = []) {\r\n\t// 原理是sort排序,Math.random()产生0<= x < 1之间的数,会导致x-0.05大于或者小于0\r\n\treturn array.sort(() => Math.random() - 0.5);\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = randomArray;\n","var __TEMP__ = require('./test.js');var validation = __REQUIRE_DEFAULT__(__TEMP__);\r\n\r\n// 添加单位，如果有rpx，%，px等单位结尾或者值为auto，直接返回，否则加上rpx单位结尾\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function addUnit(value = 'auto', unit = 'rpx') {\r\n    value = String(value);\r\n\t// 用uView内置验证规则中的number判断是否为数值\r\n    return validation.number(value) ? `${value}${unit}` : value;\r\n};exports.default = addUnit","function random(min, max) {\r\n\tif (min >= 0 && max > 0 && max >= min) {\r\n\t\tlet gab = max - min + 1;\r\n\t\treturn Math.floor(Math.random() * gab + min);\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = random;\n","function trim(str, pos = 'both') {\r\n\tif (pos == 'both') {\r\n\t\treturn str.replace(/^\\s+|\\s+$/g, \"\");\r\n\t} else if (pos == \"left\") {\r\n\t\treturn str.replace(/^\\s*/, '');\r\n\t} else if (pos == 'right') {\r\n\t\treturn str.replace(/(\\s*$)/g, \"\");\r\n\t} else if (pos == 'all') {\r\n\t\treturn str.replace(/\\s+/g, \"\");\r\n\t} else {\r\n\t\treturn str;\r\n\t}\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = trim;\n","function toast(title, duration = 1500) {\r\n\tuni.showToast({\r\n\t\ttitle: title,\r\n\t\ticon: 'none',\r\n\t\tduration: duration\r\n\t})\r\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = toast;\n","// 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法\r\n// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function getParent(name, keys) {\r\n\tlet parent = this.$parent;\r\n\t// 通过while历遍，这里主要是为了H5需要多层解析的问题\r\n\twhile (parent) {\r\n\t\t// 父组件\r\n\t\tif (parent.$options.name !== name) {\r\n\t\t\t// 如果组件的name不相等，继续上一级寻找\r\n\t\t\tparent = parent.$parent;\r\n\t\t} else {\r\n\t\t\tlet data = {};\r\n\t\t\t// 判断keys是否数组，如果传过来的是一个数组，那么直接使用数组元素值当做键值去父组件寻找\r\n\t\t\tif(Array.isArray(keys)) {\r\n\t\t\t\tkeys.map(val => {\r\n\t\t\t\t\tdata[val] = parent[val] ? parent[val] : '';\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// 历遍传过来的对象参数\r\n\t\t\t\tfor(let i in keys) {\r\n\t\t\t\t\t// 如果子组件有此值则用，无此值则用父组件的值\r\n\t\t\t\t\t// 判断是否空数组，如果是，则用父组件的值，否则用子组件的值\r\n\t\t\t\t\tif(Array.isArray(keys[i])) {\r\n\t\t\t\t\t\tif(keys[i].length) {\r\n\t\t\t\t\t\t\tdata[i] = keys[i];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdata[i] = parent[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if(keys[i].constructor === Object) {\r\n\t\t\t\t\t\t// 判断是否对象，如果是对象，且有属性，那么使用子组件的值，否则使用父组件的值\r\n\t\t\t\t\t\tif(Object.keys(keys[i]).length) {\r\n\t\t\t\t\t\t\tdata[i] = keys[i];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdata[i] = parent[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 只要子组件有传值，即使是false值，也是“传值”了，也需要覆盖父组件的同名参数\r\n\t\t\t\t\t\tdata[i] = (keys[i] || keys[i] === false) ? keys[i] : parent[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn data;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {};\r\n};exports.default = getParent","// 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法\r\n// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx\r\n// 这里默认值等于undefined有它的含义，因为最顶层元素(组件)的$parent就是undefined，意味着不传name\r\n// 值(默认为undefined)，就是查找最顶层的$parent\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function $parent(name = undefined) {\r\n\tlet parent = this.$parent;\r\n\t// 通过while历遍，这里主要是为了H5需要多层解析的问题\r\n\twhile (parent) {\r\n\t\t// 父组件\r\n\t\tif (parent.$options && parent.$options.name !== name) {\r\n\t\t\t// 如果组件的name不相等，继续上一级寻找\r\n\t\t\tparent = parent.$parent;\r\n\t\t} else {\r\n\t\t\treturn parent;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};exports.default = $parent","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function os() {\r\n\treturn uni.getSystemInfoSync().platform;\r\n};exports.os = os;\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function sys() {\r\n\treturn uni.getSystemInfoSync();\r\n};exports.sys = sys\r\n\r\n\r\n","let timeout = null;\r\n\r\n/**\r\n * 防抖原理：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数\r\n * \r\n * @param {Function} func 要执行的回调函数 \r\n * @param {Number} wait 延时的时间\r\n * @param {Boolean} immediate 是否立即执行 \r\n * @return null\r\n */\r\nfunction debounce(func, wait = 500, immediate = false) {\r\n\t// 清除定时器\r\n\tif (timeout !== null) clearTimeout(timeout);\r\n\t// 立即执行，此类情况一般用不到\r\n\tif (immediate) {\r\n\t\tvar callNow = !timeout;\r\n\t\ttimeout = setTimeout(function() {\r\n\t\t\ttimeout = null;\r\n\t\t}, wait);\r\n\t\tif (callNow) typeof func === 'function' && func();\r\n\t} else {\r\n\t\t// 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法\r\n\t\ttimeout = setTimeout(function() {\r\n\t\t\ttypeof func === 'function' && func();\r\n\t\t}, wait);\r\n\t}\n}\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = debounce;\r\n","let timer, flag;\r\n/**\r\n * 节流原理：在一定时间内，只能触发一次\r\n * \r\n * @param {Function} func 要执行的回调函数 \r\n * @param {Number} wait 延时的时间\r\n * @param {Boolean} immediate 是否立即执行\r\n * @return null\r\n */\r\nfunction throttle(func, wait = 500, immediate = true) {\r\n\tif (immediate) {\r\n\t\tif (!flag) {\r\n\t\t\tflag = true;\r\n\t\t\t// 如果是立即执行，则在wait毫秒内开始时执行\r\n\t\t\ttypeof func === 'function' && func();\r\n\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\tflag = false;\r\n\t\t\t}, wait);\r\n\t\t}\r\n\t} else {\r\n\t\tif (!flag) {\r\n\t\t\tflag = true\r\n\t\t\t// 如果是非立即执行，则在wait毫秒内的结束处执行\r\n\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\tflag = false\r\n\t\t\t\ttypeof func === 'function' && func();\r\n\t\t\t}, wait);\r\n\t\t}\r\n\t\t\r\n\t}\r\n};\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = throttle;\r\n","// 此版本发布于2020-12-17\r\nlet version = '1.8.3';\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\r\n\tv: version,\r\n\tversion: version,\r\n\t// 主题名称\r\n\ttype: [\r\n\t\t'primary',\r\n\t\t'success',\r\n\t\t'info',\r\n\t\t'error',\r\n\t\t'warning'\r\n\t]\r\n};","// uniapp在H5中各API的z-index值如下：\r\n/**\r\n * actionsheet: 999\r\n * modal: 999\r\n * navigate: 998\r\n * tabbar: 998\r\n * toast: 999\r\n */\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\r\n\ttoast: 10090,\r\n\tnoNetwork: 10080,\r\n\t// popup包含popup，actionsheet，keyboard，picker的值\r\n\tpopup: 10075,\r\n\tmask: 10070,\r\n\tnavbar: 980,\r\n\ttopTips: 975,\r\n\tsticky: 970,\r\n\tindexListSticky: 965,\r\n};"]}